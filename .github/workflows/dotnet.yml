name: .NET CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: List directory contents
        run: dir  # This helps you verify the directory structure

      - name: Read configuration from JSON file (PowerShell)
        id: read_config
        shell: pwsh
        run: |
          # Read the JSON config file
          $config = Get-Content -Raw -Path "dotnet-config.json" | ConvertFrom-Json

          # Set the values as environment variables for the entire job (using GITHUB_ENV)
          echo "CUSTOM=$($config.custom)" >> $env:GITHUB_ENV
          echo "ARGUMENTS=$($config.arguments)" >> $env:GITHUB_ENV
          echo "TEST_RUN_TITLE=$($config.testRunTitle)" >> $env:GITHUB_ENV
          echo "MODIFY_OUTPUT_PATH=$($config.modifyOutputPath)" >> $env:GITHUB_ENV
          echo "SELECT_OR_CONFIG=$($config.selectOrConfig)" >> $env:GITHUB_ENV
          echo "FEED_RESTORE=$($config.feedRestore)" >> $env:GITHUB_ENV
          echo "INCLUDE_NUGET_ORG=$($config.includeNuGetOrg)" >> $env:GITHUB_ENV

      - name: Print environment variables
        run: |
          echo "CUSTOM = ${{ env.CUSTOM }}"
          echo "ARGUMENTS = ${{ env.ARGUMENTS }}"
          echo "TEST_RUN_TITLE = ${{ env.TEST_RUN_TITLE }}"
          echo "MODIFY_OUTPUT_PATH = ${{ env.MODIFY_OUTPUT_PATH }}"
          echo "SELECT_OR_CONFIG = ${{ env.SELECT_OR_CONFIG }}"
          echo "FEED_RESTORE = ${{ env.FEED_RESTORE }}"
          echo "INCLUDE_NUGET_ORG = ${{ env.INCLUDE_NUGET_ORG }}"

      - name: Build the project using properties
        run: |
          # Ensure no empty values are passed to dotnet build
          if ($env:CUSTOM -ne "") { $customArg = "-p:Custom=$env:CUSTOM" } else { $customArg = "" }
          if ($env:ARGUMENTS -ne "") { $argumentsArg = "-p:Arguments=$env:ARGUMENTS" } else { $argumentsArg = "" }
          if ($env:MODIFY_OUTPUT_PATH -ne "") { $modifyOutputPathArg = "-p:ModifyOutputPath=$env:MODIFY_OUTPUT_PATH" } else { $modifyOutputPathArg = "" }
          if ($env:SELECT_OR_CONFIG -ne "") { $selectOrConfigArg = "-p:SelectOrConfig=$env:SELECT_OR_CONFIG" } else { $selectOrConfigArg = "" }
          if ($env:FEED_RESTORE -ne "") { $feedRestoreArg = "-p:FeedRestore=$env:FEED_RESTORE" } else { $feedRestoreArg = "" }
          if ($env:INCLUDE_NUGET_ORG -ne "") { $includeNuGetOrgArg = "-p:IncludeNuGetOrg=$env:INCLUDE_NUGET_ORG" } else { $includeNuGetOrgArg = "" }

          # Run the dotnet build command with the properly formatted properties
          dotnet build MyDotnetApp.sln --configuration Release `
            $customArg `
            $argumentsArg `
            $modifyOutputPathArg `
            $selectOrConfigArg `
            $feedRestoreArg `
            $includeNuGetOrgArg

      - name: Run the application
        run: dotnet run --project MyDotnetApp\MyDotnetApp.csproj
