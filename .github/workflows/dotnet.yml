name: .NET CI/CD.

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: List directory contents
        run: dir  # This helps you verify the directory structure

      - name: Read configuration from JSON file (PowerShell)
        id: read_config
        shell: pwsh
        run: |
          # Read the JSON config file
          $config = Get-Content -Raw -Path "dotnet-config.json" | ConvertFrom-Json

          # Set the values as environment variables for the entire job (using GITHUB_ENV)
          echo "CUSTOM=$($config.custom)" >> $env:GITHUB_ENV
          echo "ARGUMENTS=$($config.arguments)" >> $env:GITHUB_ENV
          echo "TEST_RUN_TITLE=$($config.testRunTitle)" >> $env:GITHUB_ENV
          echo "MODIFY_OUTPUT_PATH=$($config.modifyOutputPath)" >> $env:GITHUB_ENV
          echo "SELECT_OR_CONFIG=$($config.selectOrConfig)" >> $env:GITHUB_ENV
          echo "FEED_RESTORE=$($config.feedRestore)" >> $env:GITHUB_ENV
          echo "INCLUDE_NUGET_ORG=$($config.includeNuGetOrg)" >> $env:GITHUB_ENV

      - name: Print environment variables
        run: |
          echo "CUSTOM = ${{ env.CUSTOM }}"
          echo "ARGUMENTS = ${{ env.ARGUMENTS }}"
          echo "TEST_RUN_TITLE = ${{ env.TEST_RUN_TITLE }}"
          echo "MODIFY_OUTPUT_PATH = ${{ env.MODIFY_OUTPUT_PATH }}"
          echo "SELECT_OR_CONFIG = ${{ env.SELECT_OR_CONFIG }}"
          echo "FEED_RESTORE = ${{ env.FEED_RESTORE }}"
          echo "INCLUDE_NUGET_ORG = ${{ env.INCLUDE_NUGET_ORG }}"

      - name: Save .NET CLI arguments to a file
        run: |
          # Create the args.txt file with the build arguments
          echo "--configuration Release" > args.txt
          echo "-p:Custom=${{ env.CUSTOM }}" >> args.txt
          echo "-p:Arguments=${{ env.ARGUMENTS }}" >> args.txt
          echo "-p:ModifyOutputPath=${{ env.MODIFY_OUTPUT_PATH }}" >> args.txt
          echo "-p:SelectOrConfig=${{ env.SELECT_OR_CONFIG }}" >> args.txt
          echo "-p:FeedRestore=${{ env.FEED_RESTORE }}" >> args.txt
          echo "-p:IncludeNuGetOrg=${{ env.INCLUDE_NUGET_ORG }}" >> args.txt
          # Print out the content of args.txt for debugging
          cat args.txt

      - name: Read arguments from args.txt and pass them to dotnet build
        shell: pwsh
        run: |
          # Read arguments from args.txt into an array
          $args = Get-Content -Path args.txt | ForEach-Object { $_.Trim() }

          # Use the arguments for dotnet build command
          dotnet build MyDotnetApp.sln @args  # Pass arguments as splatted array

      - name: Run the application
        run: dotnet run --project MyDotnetApp\MyDotnetApp.csproj
