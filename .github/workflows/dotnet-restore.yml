name: .NET Restore and Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  restore-and-build:
    runs-on: windows-latest  # You can also use ubuntu-latest or macos-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up .NET SDK
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.x'

    # Step 3: Restore dependencies for the project or solution
    - name: Restore dependencies
      run: |
        if ($Env:RUNNER_OS -eq "Windows") 
        {
          # PowerShell syntax for Windows
          if (Test-Path "MySolution.sln") 
          {
            Write-Host "Restoring solution MySolution.sln"
            dotnet restore MySolution.sln
          } elseif (Test-Path "MyProject.csproj") 
          {
            Write-Host "Restoring project MyProject.csproj"
            dotnet restore MyProject.csproj
          } else 
          {
            Write-Host "No .sln or .csproj file found in the directory."
            exit 1
          }
        }
        else {
          # Bash syntax for Linux/macOS
          if [ -f "MySolution.sln" ]; then
            echo "Restoring solution MySolution.sln"
            dotnet restore MySolution.sln
          elif [ -f "MyProject.csproj" ]; then
            echo "Restoring project MyProject.csproj"
            dotnet restore MyProject.csproj
          else
            echo "No .sln or .csproj file found in the directory."
            exit 1
          fi
        }

    # Display the .NET version
    - name: Display .NET version
      run: dotnet --version

    # Step 4: Build the project or solution
    - name: Build project
      run: |
        if ($Env:RUNNER_OS -eq "Windows") {
          # PowerShell syntax for Windows
          if (Test-Path "MySolution.sln") {
            Write-Host "Building solution MySolution.sln"
            dotnet build MySolution.sln
          } elseif (Test-Path "MyProject.csproj") {
            Write-Host "Building project MyProject.csproj"
            dotnet build MyProject.csproj
          } else {
            Write-Host "No .sln or .csproj file found in the directory."
            exit 1
          }
        }
        else {
          # Bash syntax for Linux/macOS
          if [ -f "MySolution.sln" ]; then
            echo "Building solution MySolution.sln"
            dotnet build MySolution.sln
          elif [ -f "MyProject.csproj" ]; then
            echo "Building project MyProject.csproj"
            dotnet build MyProject.csproj
          else
            echo "No .sln or .csproj file found in the directory."
            exit 1
          fi
        }

    # Step 5: Run tests
    - name: Run unit tests
      run: |
        if ($Env:RUNNER_OS -eq "Windows") {
          # PowerShell syntax for Windows
          if (Test-Path "MySolution.sln") {
            Write-Host "Running tests for solution MySolution.sln"
            dotnet test MySolution.sln
          } elseif (Test-Path "MyProject.csproj") {
            Write-Host "Running tests for project MyProject.csproj"
            dotnet test MyProject.csproj
          } else {
            Write-Host "No .sln or .csproj file found in the directory."
            exit 1
          }
        }
        else {
          # Bash syntax for Linux/macOS
          if [ -f "MySolution.sln" ]; then
            echo "Running tests for solution MySolution.sln"
            dotnet test MySolution.sln
          elif [ -f "MyProject.csproj" ]; then
            echo "Running tests for project MyProject.csproj"
            dotnet test MyProject.csproj
          else
            echo "No .sln or .csproj file found in the directory."
            exit 1
          fi
        }
